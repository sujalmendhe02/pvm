╔══════════════════════════════════════════════════════════════════════════════╗
║                         PRINTVEND SYSTEM ARCHITECTURE                        ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│                              USER JOURNEY FLOW                              │
└─────────────────────────────────────────────────────────────────────────────┘

    👤 User                  📱 Phone                🖥️  Web App
      │                        │                        │
      │  1. Scan QR Code      │                        │
      ├──────────────────────>│                        │
      │                        │  2. Open Link         │
      │                        ├───────────────────────>│
      │                        │                        │
      │  3. Enter Name         │                        │
      │                        ├───────────────────────>│
      │                        │  4. Connect Machine   │
      │                        │<───────────────────────┤
      │                        │                        │
      │  5. Upload PDF         │                        │
      │                        ├───────────────────────>│
      │                        │                        │
      │  6. Select Pages       │                        │
      │                        ├───────────────────────>│
      │                        │                        │
      │  7. Choose Priority    │                        │
      │                        ├───────────────────────>│
      │                        │                        │
      │  8. Make Payment       │                        │
      │                        ├───────────────────────>│
      │                        │  9. Job in Queue      │
      │                        │<───────────────────────┤
      │                        │                        │
      │  10. Track Status      │  (Real-time Updates)  │
      │                        │<──────────────────────>│
      │                        │                        │
      │  11. Collect Print     │                        │
      └────────────────────────┴────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                           COMPONENT ARCHITECTURE                            │
└─────────────────────────────────────────────────────────────────────────────┘

╔═════════════════════════════════════════════════════════════════════════════╗
║                           FRONTEND (React + Vite)                           ║
╠═════════════════════════════════════════════════════════════════════════════╣
║                                                                             ║
║  ┌─────────────────────────────────────────────────────────────────────┐   ║
║  │                            App.jsx                                  │   ║
║  │                      (Main Application)                             │   ║
║  └────────────────┬────────────────┬───────────────┬────────────────────┘   ║
║                   │                │               │                        ║
║         ┌─────────▼────────┐  ┌───▼────────┐  ┌──▼──────────┐             ║
║         │ ConnectMachine   │  │ UploadPDF  │  │  JobStatus  │             ║
║         │  Component       │  │ Component  │  │  Component  │             ║
║         │                  │  │            │  │             │             ║
║         │ - QR Scan UI     │  │ - Upload   │  │ - Tracking  │             ║
║         │ - Machine Key    │  │ - Pages    │  │ - Real-time │             ║
║         │ - User Name      │  │ - Priority │  │ - Payment   │             ║
║         └──────────────────┘  └────────────┘  └─────────────┘             ║
║                                                                             ║
║  ┌─────────────────────────────────────────────────────────────────────┐   ║
║  │                    lib/supabase.js                                  │   ║
║  │               (Supabase Client Instance)                            │   ║
║  └─────────────────────────────────────────────────────────────────────┘   ║
╚═════════════════════════════════════════════════════════════════════════════╝
                                     │
                                     │ HTTPS + WebSocket
                                     ▼
╔═════════════════════════════════════════════════════════════════════════════╗
║                        BACKEND (Supabase Platform)                          ║
╠═════════════════════════════════════════════════════════════════════════════╣
║                                                                             ║
║  ┌───────────────────────────────────────────────────────────────────────┐ ║
║  │                      EDGE FUNCTIONS (Deno)                            │ ║
║  ├───────────────────────────────────────────────────────────────────────┤ ║
║  │                                                                       │ ║
║  │  ┌────────────────┐  ┌──────────────┐  ┌─────────────────┐          │ ║
║  │  │connect-machine │  │ create-job   │  │ machine-status  │          │ ║
║  │  ├────────────────┤  ├──────────────┤  ├─────────────────┤          │ ║
║  │  │ Validate       │  │ Calculate    │  │ Get Machine     │          │ ║
║  │  │ machine key    │  │ cost         │  │ info            │          │ ║
║  │  │                │  │              │  │                 │          │ ║
║  │  │ Create user    │  │ Insert job   │  │ Get queue       │          │ ║
║  │  │                │  │              │  │ status          │          │ ║
║  │  │ Create session │  │ Return       │  │                 │          │ ║
║  │  │                │  │ position     │  │ Return data     │          │ ║
║  │  └────────────────┘  └──────────────┘  └─────────────────┘          │ ║
║  │                                                                       │ ║
║  └───────────────────────────────────────────────────────────────────────┘ ║
║                                     │                                       ║
║  ┌──────────────────────────────────┼─────────────────────────────────────┐ ║
║  │          POSTGRESQL DATABASE     │                                     │ ║
║  ├──────────────────────────────────┴─────────────────────────────────────┤ ║
║  │                                                                         │ ║
║  │  ┌──────────┐  ┌──────────┐  ┌────────────┐  ┌──────────┐            │ ║
║  │  │ machines │  │  users   │  │print_jobs  │  │ sessions │            │ ║
║  │  ├──────────┤  ├──────────┤  ├────────────┤  ├──────────┤            │ ║
║  │  │ id       │  │ id       │  │ id         │  │ id       │            │ ║
║  │  │ key      │  │ name     │  │ machine_id │  │ machine  │            │ ║
║  │  │ name     │  │ email    │  │ user_id    │  │ user     │            │ ║
║  │  │ location │  │ phone    │  │ file_url   │  │ room     │            │ ║
║  │  │ status   │  │ created  │  │ pages      │  │ status   │            │ ║
║  │  │ rate     │  └──────────┘  │ priority   │  └──────────┘            │ ║
║  │  │ created  │                │ status     │                           │ ║
║  │  └──────────┘                │ cost       │                           │ ║
║  │                               │ payment    │                           │ ║
║  │                               └────────────┘                           │ ║
║  │                                                                         │ ║
║  │  🔒 Row Level Security (RLS) Enabled on All Tables                     │ ║
║  │  📊 Indexes: machine_key, print_jobs queue, sessions status            │ ║
║  └─────────────────────────────────────────────────────────────────────────┘ ║
║                                                                             ║
║  ┌───────────────────────────────────────────────────────────────────────┐ ║
║  │                   REALTIME (WebSocket)                                │ ║
║  ├───────────────────────────────────────────────────────────────────────┤ ║
║  │  • Subscribe to print_jobs table changes                              │ ║
║  │  • Push updates to connected clients                                  │ ║
║  │  • Filter by job ID or machine ID                                     │ ║
║  └───────────────────────────────────────────────────────────────────────┘ ║
╚═════════════════════════════════════════════════════════════════════════════╝


┌─────────────────────────────────────────────────────────────────────────────┐
│                            DATA FLOW DIAGRAM                                │
└─────────────────────────────────────────────────────────────────────────────┘

1. CONNECTION FLOW:
   ┌──────┐  machineKey   ┌───────────────┐  validate    ┌──────────┐
   │ User ├──────────────>│ Edge Function ├─────────────>│ Database │
   └──────┘  + userName   └───────────────┘              └──────────┘
                                 │                              │
                                 │<─────────────────────────────┘
                                 │        machine data
                                 │
                                 ├─> Create user record
                                 ├─> Create session
                                 └─> Return connection info


2. UPLOAD FLOW:
   ┌──────┐   PDF file    ┌───────────┐   analyze   ┌──────────┐
   │ User ├──────────────>│ Component ├────────────>│ Browser  │
   └──────┘               └───────────┘             └──────────┘
                                 │                        │
                                 │<───────────────────────┘
                                 │      page count
                                 │
                                 ├─> User selects pages
                                 ├─> User selects priority
                                 └─> Calculate cost


3. JOB CREATION FLOW:
   ┌───────────┐   job data   ┌───────────────┐  insert   ┌──────────┐
   │ Component ├─────────────>│ Edge Function ├──────────>│ Database │
   └───────────┘              └───────────────┘           └──────────┘
                                      │                         │
                                      │<────────────────────────┘
                                      │     job ID + position
                                      │
                                      └─> Return to user


4. REAL-TIME STATUS FLOW:
   ┌──────────┐  change   ┌──────────┐  websocket   ┌───────────┐
   │ Database ├──────────>│ Realtime ├─────────────>│ Component │
   └──────────┘           └──────────┘              └───────────┘
       │                                                   │
       │                                                   │
   (Machine updates                               (UI updates
    job status)                                    automatically)


┌─────────────────────────────────────────────────────────────────────────────┐
│                           PRIORITY QUEUE LOGIC                              │
└─────────────────────────────────────────────────────────────────────────────┘

  Queue Processing Order:

  ┌─────────────────────────────────────────────────────────────┐
  │                        PRINT QUEUE                          │
  ├─────────────────────────────────────────────────────────────┤
  │                                                             │
  │  Position 1:  [URGENT]   User A - 5 pages  (Created: 10:00)│
  │               Priority: 1                                   │
  │               ▲ Currently Printing                          │
  │               │                                             │
  │  Position 2:  [URGENT]   User B - 3 pages  (Created: 10:05)│
  │               Priority: 1                                   │
  │               │ Next in Line                                │
  │               │                                             │
  │  Position 3:  [NORMAL]   User C - 10 pages (Created: 09:50)│
  │               Priority: 2                                   │
  │               │                                             │
  │  Position 4:  [NORMAL]   User D - 2 pages  (Created: 09:55)│
  │               Priority: 2                                   │
  │               │                                             │
  │  Position 5:  [NORMAL]   User E - 7 pages  (Created: 10:10)│
  │               Priority: 2                                   │
  │               ▼                                             │
  │                                                             │
  └─────────────────────────────────────────────────────────────┘

  Sorting Algorithm:

  1. ORDER BY priority ASC     (1 before 2)
  2. THEN BY created_at ASC    (older before newer)


┌─────────────────────────────────────────────────────────────────────────────┐
│                           SECURITY LAYERS                                   │
└─────────────────────────────────────────────────────────────────────────────┘

  Layer 1: HTTPS/TLS
  ────────────────────────────────────
  ✓ All traffic encrypted
  ✓ Automatic SSL certificates
  ✓ Secure WebSocket connections

  Layer 2: Row Level Security (RLS)
  ────────────────────────────────────
  ✓ Table-level access control
  ✓ Policy-based permissions
  ✓ Query filtering by policies

  Layer 3: Input Validation
  ────────────────────────────────────
  ✓ Frontend form validation
  ✓ Backend parameter checking
  ✓ SQL injection prevention

  Layer 4: Payment Security
  ────────────────────────────────────
  ✓ Razorpay PCI compliance
  ✓ No card data stored
  ✓ Secure payment gateway

  Layer 5: Data Privacy
  ────────────────────────────────────
  ✓ Files deleted after print
  ✓ Minimal data collection
  ✓ No tracking cookies


┌─────────────────────────────────────────────────────────────────────────────┐
│                          DEPLOYMENT ARCHITECTURE                            │
└─────────────────────────────────────────────────────────────────────────────┘

  ┌─────────────────────────────────────────────────────────────────┐
  │                         PRODUCTION                              │
  ├─────────────────────────────────────────────────────────────────┤
  │                                                                 │
  │  ┌──────────────────┐         ┌──────────────────┐             │
  │  │  Vercel/Netlify  │         │     Supabase     │             │
  │  │   (Frontend)     │◄───────►│    (Backend)     │             │
  │  ├──────────────────┤         ├──────────────────┤             │
  │  │ • React App      │         │ • Edge Functions │             │
  │  │ • Static Files   │         │ • PostgreSQL     │             │
  │  │ • CDN            │         │ • Realtime       │             │
  │  │ • Auto SSL       │         │ • Auto Backups   │             │
  │  └──────────────────┘         └──────────────────┘             │
  │          │                             │                       │
  │          │                             │                       │
  │  ┌───────▼─────────────────────────────▼────────┐              │
  │  │              Global CDN                      │              │
  │  │     (Distributed Edge Locations)             │              │
  │  └──────────────────────────────────────────────┘              │
  │                     │                                          │
  │  ┌──────────────────▼──────────────────────────┐               │
  │  │              End Users                      │               │
  │  │   (Mobile, Tablet, Desktop Browsers)        │               │
  │  └─────────────────────────────────────────────┘               │
  │                                                                 │
  └─────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                          COST BREAKDOWN                                     │
└─────────────────────────────────────────────────────────────────────────────┘

  Job Cost Formula:

  ┌─────────────────────────────────────────────────┐
  │                                                 │
  │  COST = Pages × Rate × Priority_Multiplier     │
  │                                                 │
  │  Where:                                         │
  │    Pages = Number of pages to print            │
  │    Rate = Machine rate per page (₹2.00)       │
  │    Priority_Multiplier = 1.0 (Normal)          │
  │                        = 1.5 (Urgent)          │
  │                                                 │
  └─────────────────────────────────────────────────┘

  Examples:

  Normal Priority:
  5 pages × ₹2.00 × 1.0 = ₹10.00

  Urgent Priority:
  5 pages × ₹2.00 × 1.5 = ₹15.00


┌─────────────────────────────────────────────────────────────────────────────┐
│                         MONITORING DASHBOARD                                │
└─────────────────────────────────────────────────────────────────────────────┘

  Supabase Dashboard View:

  ┌───────────────────────────────────────────────────────────┐
  │  TABLE EDITOR           │  LOGS            │  METRICS     │
  ├───────────────────────────────────────────────────────────┤
  │                                                           │
  │  📊 machines            │  🔍 Function     │  📈 Usage    │
  │     • 3 online          │     Logs         │     Charts   │
  │     • 0 offline         │                  │              │
  │                         │  ⚠️  Errors      │  💾 Storage  │
  │  📋 print_jobs          │     (None)       │     Usage    │
  │     • 2 queued          │                  │              │
  │     • 1 printing        │  ✅ Success      │  🌐 API      │
  │     • 15 completed      │     Rate: 99.8%  │     Calls    │
  │                         │                  │              │
  │  👥 users               │  ⏱️  Response    │  👥 Active   │
  │     • 47 total          │     Time: 120ms  │     Users    │
  │     • 5 active          │                  │              │
  │                         │                  │              │
  └───────────────────────────────────────────────────────────┘


╔═════════════════════════════════════════════════════════════════════════════╗
║                            QUICK REFERENCE                                  ║
╠═════════════════════════════════════════════════════════════════════════════╣
║                                                                             ║
║  Component Files:      src/components/                                      ║
║                        ├── ConnectMachine.jsx                               ║
║                        ├── UploadPDF.jsx                                    ║
║                        └── JobStatus.jsx                                    ║
║                                                                             ║
║  Edge Functions:       supabase/functions/                                  ║
║                        ├── connect-machine/                                 ║
║                        ├── create-job/                                      ║
║                        └── machine-status/                                  ║
║                                                                             ║
║  Database Tables:      machines, users, print_jobs, sessions                ║
║                                                                             ║
║  Test Machines:        ABCD1234, EFGH5678, IJKL9012                         ║
║                                                                             ║
║  Build Command:        npm run build                                        ║
║                                                                             ║
║  Bundle Size:          290KB (86KB gzipped)                                 ║
║                                                                             ║
╚═════════════════════════════════════════════════════════════════════════════╝
